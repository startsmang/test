project_name: xx商城

server:
  # 本地接口服务

  #dev: http://192.168.1.183:8888/api/private/v1  http://127.0.0.1:8888/api/private/v1 https://peach-test.hjgpscm.com/graphql
  dev: http://192.168.1.183:8888/api/private/v1
  test: http://127.0.0.1:8888/api/private/v1
  prod: http://127.0.0.1:8888/api/private/v1


Operations_db: # 操作数据库
  assert_db: False  #  True  启用数据库查询断言   False  不启用
  backup: False   #启动测试前启动备份数据库  数据库服务器 linux，windows都适用
  recovery: False  #测试完成后恢复备份数据库  数据库服务器 linux，windows都适用


severity:
  case_severity: ["P1","P2","P3","P4"]#用例等级 "["P1","P2","P3","P4","P5"]"  设置需要测试用例等级
  cor_rel_case_severity: #用例等级和allure报告优先级的对应关系
    P1: blocker
    P2: critical
    P3: normal
    P4: minor
    P5: trivial

# 基准的请求头信息
request_headers: {"peachauthversioncode": "${versioncode}","appversioncode": "${versioncode}",}

# 基准存放提取参数的池子
extra_pool: {"userAccount": "ceshi6","password": "Hj123456","org_id": 176,"tenant_id": 1,"token":'',"versioncode": "9","singleBatch": False}

# 基准的请求参数
request_parameters: {}

test_case_type:  # 用例读取的来源  为True读取文件类型，为False不读取,如excel 和yaml都为True时 读取累加
  dev:
    - read: True  #  True  读取excle文件中的用例   False  不读取
      test_case: ./data/env_dev/case_excle/
      file: xlsx
      order: 1   #顺序

    - read: True  #  True  False  读取yaml文件中的用例
      test_case: ./data/env_dev/case_yaml/
      file: yaml
      order: 0  #顺序



  test:
    - read: True  #  True  读取excle文件中的用例   False  不读取
      test_case: ./data/env_test/case_excle/
      file: xlsx
      order: 1   #数字排序顺序

    - read: True  #  True  False  读取yaml文件中的用例
      test_case: ./data/env_test/case_yaml/
      file: yaml
      order: 0  #数字排序顺序

  prod:
    - read: False  #  True  读取excle文件中的用例   False  不读取
      test_case: ./data/env_prod/case_excle/
      file: xlsx
      order: 1   #顺序

    - read: True  #  True  False  读取yaml文件中的用例
      test_case: ./data/env_prod/case_yaml/
      file: yaml
      order: 0  #顺序

file_path:
  # test_case_xlsx: ./data/case_data.xlsx  弃用
  test_case_excle : ./data/case_excle/  #读取目录下所以的excel数据
  test_case_yaml: ./data/case_yaml/  #读取目录下所以的yaml数据
  report: target/
  log: log/run{time}.log

email:
  # 发件人邮箱
  user:  huoyan_hyh@163.com
  # 发件人邮箱授权码
  password:  DYTKTEPXOZXXZMHK
  # 邮箱host
  host:  smtp.163.com
  contents:  解压allure-report.zip(接口测试报告)后，进入解压目录，运行Start_server.bat（需要有python环境），在浏览器输入http://127.0.0.1:5188/allure-report 即可查看测试报告。出现“Serving HTTP on 0.0.0.0 port 5188 (http://0.0.0.0:5188/) ...”表示服务启动完成，可以输入 http://127.0.0.1:5188/allure-report 地址查看报告
  # 收件人邮箱
  addressees: ["397135766@qq.com", "huangpeng245@163.com"] #["397135766@qq.com", "178999718@qq.com"]
  title:  接口自动化测试报告(见附件)
  # 附件
  enclosures: ./report_zip/allure-report.zip

# 数据库校验- mysql
database:
  #host: "192.168.1.183" #localhost  127.0.0.1
  dev: #开发环境数据库
    host: "192.168.1.183" #localhost  127.0.0.1
    port: 3306
    user: root
    # 不用''会被解析成int类型数据
    password: root
    db_name:  mydb
    charset:  utf8mb4
  test: #开发环境数据库
    host: "192.168.1.234" #localhost  127.0.0.1
    port: 3306
    user: root
    # 不用''会被解析成int类型数据
    password: '123456'
    db_name: mydb
    charset: utf8mb4
  prod: #开发环境数据库
    host: "127.0.0.1" #localhost  127.0.0.1
    port: 3306
    user: root
    # 不用''会被解析成int类型数据
    password: root
    db_name: mydb
    charset: utf8mb4

# 数据库所在的服务器配置
ssh_server:
  dev: #开发环境数据库所在的服务器
    host: "192.168.1.183" #localhost  127.0.0.1
    port: 22
    username: root
    password: root
    # 私有密钥文件路径
    private_key_file: ''
    # 私钥密码
    private_passowrd: ''
    # 如果使用的docker容器部署mysql服务，需要传入mysql的容器id/name
    mysql_container:
    # 数据库备份文件导出的本地路径, 需要保证存在该文件夹下   ./backup_sqls/
    sql_data_file: /mnt/backup_sql/  #  /mnt/backup_sql/
    #上传本地已初始化好的数据库sql文件，恢复到测试数据库进行测试
    sql_upload_file: ./config/mydb.sql

  test: #开发环境数据库所在的服务器
    host: "192.168.1.234" #localhost  127.0.0.1
    port: 22
    username: NING MEI
    password: '123456'
    # 私有密钥文件路径
    private_key_file: ''
    # 私钥密码
    private_passowrd: ''
    # 如果使用的docker容器部署mysql服务，需要传入mysql的容器id/name
    mysql_container:
    # 数据库备份文件导出的本地路径, 需要保证存在该文件夹   ./backup_sqls/
    sql_data_file: D:\Users #  Linux路径： /mnt/backup_sql/   windows路径: D:\Users
    #上传本地已初始化好的数据库sql文件，恢复到测试数据库进行测试
    sql_upload_file: ./config/mydb.sql  #ar_myb.sql    ./config/mydb.sql

  prod: #开发环境数据库所在的服务器
    host: "127.0.0.1" #localhost  127.0.0.1
    port: 22
    username: root
    password: root
    # 私有密钥文件路径
    private_key_file: ''
    # 私钥密码
    private_passowrd: ''
    # 如果使用的docker容器部署mysql服务，需要传入mysql的容器id/name
    mysql_container:
    # 数据库备份文件导出的本地路径, 需要保证存在该文件夹   ./backup_sqls/
    sql_data_file: /mnt/backup_sql/  #  /mnt/backup_sql/
    #上传本地已初始化好的数据库sql文件，恢复到测试数据库进行测试
    sql_upload_file: ./config/mydb.sql

